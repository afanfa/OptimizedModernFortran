Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -c -qopenmp -xhost -qopt-report=5 -qopt-report-file=vectorization.o.optrpt -o vectorization.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: VECTOR_1

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (VECTOR_1) [1/1=100.0%] vectorization.f90(1,9)
  -> EXTERN: (1,9) for_set_reentrancy
  -> EXTERN: (13,3) for_alloc_allocatable
  -> EXTERN: (13,3) for_alloc_allocatable
  -> EXTERN: (20,3) for_realloc_lhs
  -> EXTERN: (21,3) for_realloc_lhs
  -> EXTERN: (23,8) MY_VECTOR_ADD
  -> EXTERN: (24,8) MY_VECTOR_ADD_ASSUMED
  -> EXTERN: (25,8) MY_VECTOR_ADD_ASSUMED_CONTIGUOUS
  -> EXTERN: (26,8) MY_VECTOR_ADD_ALLOCATABLE
  -> EXTERN: (34,8) MY_VECTOR_ADD_POINTER
  -> EXTERN: (35,8) MY_VECTOR_ADD_POINTER_CONTIGUOUS
  -> EXTERN: (36,8) __resetsp_inlined
  -> EXTERN: (36,8) MY_VECTOR_ADD_ASSUMED_CONTIGUOUS
  -> EXTERN: (36,8) _alloca
  -> EXTERN: (36,8) __getsp_inlined
  -> EXTERN: (36,41) _alloca


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at vectorization.f90(15,3)
   remark #15388: vectorization support: reference a(i) has aligned access   [ vectorization.f90(16,6) ]
   remark #15388: vectorization support: reference b(i) has aligned access   [ vectorization.f90(17,6) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 4.660 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=625
LOOP END

LOOP BEGIN at vectorization.f90(20,3)
   remark #25399: memcopy generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at vectorization.f90(21,3)
   remark #25399: memcopy generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at vectorization.f90(36,8)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15388: vectorization support: reference at (36:41) has aligned access   [ vectorization.f90(36,41) ]
   remark #15389: vectorization support: reference P_A(:) has unaligned access   [ vectorization.f90(36,41) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at vectorization.f90(36,8)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at vectorization.f90(36,8)
<Multiversioned v2>
   remark #15388: vectorization support: reference at (36:41) has aligned access   [ vectorization.f90(36,41) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P_A(:)>, stride is unknown to compiler   [ vectorization.f90(36,41) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at vectorization.f90(36,8)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at vectorization.f90(36,41)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15388: vectorization support: reference at (36:45) has aligned access   [ vectorization.f90(36,45) ]
   remark #15389: vectorization support: reference P_B(:) has unaligned access   [ vectorization.f90(36,45) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at vectorization.f90(36,41)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at vectorization.f90(36,41)
<Multiversioned v2>
   remark #15388: vectorization support: reference at (36:45) has aligned access   [ vectorization.f90(36,45) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <P_B(:)>, stride is unknown to compiler   [ vectorization.f90(36,45) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at vectorization.f90(36,41)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at vectorization.f90(36,41)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15389: vectorization support: reference P_A(:) has unaligned access
   remark #15388: vectorization support: reference at (36:41) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 2.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at vectorization.f90(36,41)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at vectorization.f90(36,41)
<Multiversioned v2>
   remark #15388: vectorization support: reference at (36:41) has aligned access
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <P_A(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.870 
   remark #15478: estimated potential speedup: 1.380 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at vectorization.f90(36,41)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at vectorization.f90(36,45)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15389: vectorization support: reference P_B(:) has unaligned access
   remark #15388: vectorization support: reference at (36:45) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.750 
   remark #15478: estimated potential speedup: 2.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at vectorization.f90(36,45)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at vectorization.f90(36,45)
<Multiversioned v2>
   remark #15388: vectorization support: reference at (36:45) has aligned access
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <P_B(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 8
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.870 
   remark #15478: estimated potential speedup: 1.380 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at vectorization.f90(36,45)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

vectorization.f90(20,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
vectorization.f90(20,3):remark #34026: call to memcpy implemented as a call to optimized library version
vectorization.f90(21,3):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
vectorization.f90(21,3):remark #34026: call to memcpy implemented as a call to optimized library version
vectorization.f90(1,9):remark #34051: REGISTER ALLOCATION : [MAIN__] vectorization.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     269
            Global    :      71
            Local     :     198
        Regenerable   :      62
        Spilled       :       8
        
    Routine stack
        Variables     :   160868 bytes*
            Reads     :      20 [9.20e+00 ~ 0.0%]
            Writes    :     114 [8.01e+04 ~ 72.5%]
        Spills        :      32 bytes*
            Reads     :      19 [6.37e+00 ~ 0.0%]
            Writes    :       5 [2.60e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
