my_matrix_add_allocatable (struct array02_real(kind=8) & restrict a, struct array02_real(kind=8) & restrict b)
{
  integer(kind=4) i;
  integer(kind=4) j;

  {
    struct array02_real(kind=8) * D.3809;
    integer(kind=4) D.3810;

    D.3809 = (struct array02_real(kind=8) *) a;
    D.3810 = (integer(kind=4)) MAX_EXPR <(D.3809->dim[0].ubound - D.3809->dim[0].lbound) + 1, 0>;
    i = 1;
    while (1)
      {
        {
          logical(kind=4) D.3813;

          D.3813 = i > D.3810;
          if (D.3813) goto L.2;
          {
            struct array02_real(kind=8) * D.3814;
            integer(kind=4) D.3815;

            D.3814 = (struct array02_real(kind=8) *) a;
            D.3815 = (integer(kind=4)) MAX_EXPR <(D.3814->dim[1].ubound - D.3814->dim[1].lbound) + 1, 0>;
            j = 1;
            while (1)
              {
                {
                  logical(kind=4) D.3818;

                  D.3818 = j > D.3815;
                  if (D.3818) goto L.4;
                  (*(real(kind=8)[0:] * restrict) a->data)[(a->offset + (integer(kind=8)) j * a->dim[1].stride) + (integer(kind=8)) i] = (*(real(kind=8)[0:] * restrict) a->data)[(a->offset + (integer(kind=8)) j * a->dim[1].stride) + (integer(kind=8)) i] + (*(real(kind=8)[0:] * restrict) b->data)[(b->offset + (integer(kind=8)) j * b->dim[1].stride) + (integer(kind=8)) i];
                  L.3:;
                  j = j + 1;
                }
              }
            L.4:;
          }
          L.1:;
          i = i + 1;
        }
      }
    L.2:;
  }
}


my_matrix_add_explicit_intent (real(kind=8)[0:D.3844] * restrict a, real(kind=8)[0:D.3841] * restrict b, integer(kind=4) & restrict n)
{
  integer(kind=8) ubound.0;
  integer(kind=8) ubound.1;
  integer(kind=8) stride.2;
  integer(kind=8) offset.3;
  integer(kind=8) size.4;
  integer(kind=8) ubound.5;
  integer(kind=8) ubound.6;
  integer(kind=8) stride.7;
  integer(kind=8) offset.8;
  integer(kind=8) size.9;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=8) D.3841;
  bitsizetype D.3842;
  sizetype D.3843;
  integer(kind=8) D.3844;
  bitsizetype D.3845;
  sizetype D.3846;

  ubound.0 = (integer(kind=8)) *n;
  stride.2 = NON_LVALUE_EXPR <ubound.0>;
  stride.2 = MAX_EXPR <stride.2, 0>;
  ubound.1 = (integer(kind=8)) *n;
  size.4 = stride.2 * NON_LVALUE_EXPR <ubound.1>;
  size.4 = MAX_EXPR <size.4, 0>;
  D.3844 = size.4 + -1;
  D.3845 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.4> * 64;
  D.3846 = (sizetype) NON_LVALUE_EXPR <size.4> * 8;
  offset.3 = ~NON_LVALUE_EXPR <stride.2>;
  ubound.5 = (integer(kind=8)) *n;
  stride.7 = NON_LVALUE_EXPR <ubound.5>;
  stride.7 = MAX_EXPR <stride.7, 0>;
  ubound.6 = (integer(kind=8)) *n;
  size.9 = stride.7 * NON_LVALUE_EXPR <ubound.6>;
  size.9 = MAX_EXPR <size.9, 0>;
  D.3841 = size.9 + -1;
  D.3842 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.9> * 64;
  D.3843 = (sizetype) NON_LVALUE_EXPR <size.9> * 8;
  offset.8 = ~NON_LVALUE_EXPR <stride.7>;
  {
    integer(kind=4) D.3833;

    D.3833 = *n;
    i = 1;
    while (1)
      {
        {
          logical(kind=4) D.3836;

          D.3836 = i > D.3833;
          if (D.3836) goto L.6;
          {
            integer(kind=4) D.3837;

            D.3837 = *n;
            j = 1;
            while (1)
              {
                {
                  logical(kind=4) D.3840;

                  D.3840 = j > D.3837;
                  if (D.3840) goto L.8;
                  (*a)[((integer(kind=8)) j * stride.2 + offset.3) + (integer(kind=8)) i] = (*a)[((integer(kind=8)) j * stride.2 + offset.3) + (integer(kind=8)) i] + (*b)[((integer(kind=8)) j * stride.7 + offset.8) + (integer(kind=8)) i];
                  L.7:;
                  j = j + 1;
                }
              }
            L.8:;
          }
          L.5:;
          i = i + 1;
        }
      }
    L.6:;
  }
}


my_matrix_add_explicit (real(kind=8)[0:D.3872] * restrict a, real(kind=8)[0:D.3869] * restrict b, integer(kind=4) & restrict n)
{
  integer(kind=8) ubound.10;
  integer(kind=8) ubound.11;
  integer(kind=8) stride.12;
  integer(kind=8) offset.13;
  integer(kind=8) size.14;
  integer(kind=8) ubound.15;
  integer(kind=8) ubound.16;
  integer(kind=8) stride.17;
  integer(kind=8) offset.18;
  integer(kind=8) size.19;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=8) D.3869;
  bitsizetype D.3870;
  sizetype D.3871;
  integer(kind=8) D.3872;
  bitsizetype D.3873;
  sizetype D.3874;

  ubound.10 = (integer(kind=8)) *n;
  stride.12 = NON_LVALUE_EXPR <ubound.10>;
  stride.12 = MAX_EXPR <stride.12, 0>;
  ubound.11 = (integer(kind=8)) *n;
  size.14 = stride.12 * NON_LVALUE_EXPR <ubound.11>;
  size.14 = MAX_EXPR <size.14, 0>;
  D.3872 = size.14 + -1;
  D.3873 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.14> * 64;
  D.3874 = (sizetype) NON_LVALUE_EXPR <size.14> * 8;
  offset.13 = ~NON_LVALUE_EXPR <stride.12>;
  ubound.15 = (integer(kind=8)) *n;
  stride.17 = NON_LVALUE_EXPR <ubound.15>;
  stride.17 = MAX_EXPR <stride.17, 0>;
  ubound.16 = (integer(kind=8)) *n;
  size.19 = stride.17 * NON_LVALUE_EXPR <ubound.16>;
  size.19 = MAX_EXPR <size.19, 0>;
  D.3869 = size.19 + -1;
  D.3870 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.19> * 64;
  D.3871 = (sizetype) NON_LVALUE_EXPR <size.19> * 8;
  offset.18 = ~NON_LVALUE_EXPR <stride.17>;
  {
    integer(kind=4) D.3861;

    D.3861 = *n;
    i = 1;
    while (1)
      {
        {
          logical(kind=4) D.3864;

          D.3864 = i > D.3861;
          if (D.3864) goto L.10;
          {
            integer(kind=4) D.3865;

            D.3865 = *n;
            j = 1;
            while (1)
              {
                {
                  logical(kind=4) D.3868;

                  D.3868 = j > D.3865;
                  if (D.3868) goto L.12;
                  (*a)[((integer(kind=8)) j * stride.12 + offset.13) + (integer(kind=8)) i] = (*a)[((integer(kind=8)) j * stride.12 + offset.13) + (integer(kind=8)) i] + (*b)[((integer(kind=8)) j * stride.17 + offset.18) + (integer(kind=8)) i];
                  L.11:;
                  j = j + 1;
                }
              }
            L.12:;
          }
          L.9:;
          i = i + 1;
        }
      }
    L.10:;
  }
}


my_matrix_add_intent (struct array02_real(kind=8) & restrict a, struct array02_real(kind=8) & restrict b)
{
  integer(kind=8) ubound.20;
  integer(kind=8) stride.21;
  integer(kind=8) ubound.22;
  integer(kind=8) stride.23;
  integer(kind=8) offset.24;
  integer(kind=8) size.25;
  real(kind=8)[0:D.3920] * restrict a.0;
  integer(kind=8) ubound.26;
  integer(kind=8) stride.27;
  integer(kind=8) ubound.28;
  integer(kind=8) stride.29;
  integer(kind=8) offset.30;
  integer(kind=8) size.31;
  real(kind=8)[0:D.3916] * restrict b.0;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=8) D.3916;
  bitsizetype D.3917;
  sizetype D.3918;
  integer(kind=8) D.3920;
  bitsizetype D.3921;
  sizetype D.3922;

  {
    integer(kind=8) D.3919;

    D.3919 = a->dim[0].stride;
    stride.21 = D.3919 != 0 ? D.3919 : 1;
    a.0 = (real(kind=8)[0:D.3920] * restrict) a->data;
    ubound.20 = (a->dim[0].ubound - a->dim[0].lbound) + 1;
    stride.23 = a->dim[1].stride;
    ubound.22 = (a->dim[1].ubound - a->dim[1].lbound) + 1;
    size.25 = stride.23 * NON_LVALUE_EXPR <ubound.22>;
    offset.24 = -NON_LVALUE_EXPR <stride.21> - NON_LVALUE_EXPR <stride.23>;
    D.3920 = size.25 + -1;
    D.3921 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.25> * 64;
    D.3922 = (sizetype) NON_LVALUE_EXPR <size.25> * 8;
  }
  {
    integer(kind=8) D.3915;

    D.3915 = b->dim[0].stride;
    stride.27 = D.3915 != 0 ? D.3915 : 1;
    b.0 = (real(kind=8)[0:D.3916] * restrict) b->data;
    ubound.26 = (b->dim[0].ubound - b->dim[0].lbound) + 1;
    stride.29 = b->dim[1].stride;
    ubound.28 = (b->dim[1].ubound - b->dim[1].lbound) + 1;
    size.31 = stride.29 * NON_LVALUE_EXPR <ubound.28>;
    offset.30 = -NON_LVALUE_EXPR <stride.27> - NON_LVALUE_EXPR <stride.29>;
    D.3916 = size.31 + -1;
    D.3917 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.31> * 64;
    D.3918 = (sizetype) NON_LVALUE_EXPR <size.31> * 8;
  }
  {
    integer(kind=8) D.3893;
    integer(kind=8) D.3894;
    struct array02_real(kind=8) parm.32;
    integer(kind=8) D.3896;
    integer(kind=8) D.3897;
    integer(kind=8) D.3898;
    struct array02_real(kind=8) * D.3899;
    integer(kind=4) D.3900;

    D.3893 = ubound.20;
    D.3894 = ubound.22;
    parm.32.dtype = {.elem_len=8, .rank=2, .type=3};
    D.3896 = offset.24;
    D.3897 = stride.21;
    parm.32.dim[0].lbound = 1;
    parm.32.dim[0].ubound = D.3893;
    parm.32.dim[0].stride = NON_LVALUE_EXPR <D.3897>;
    D.3898 = stride.23;
    parm.32.dim[1].lbound = 1;
    parm.32.dim[1].ubound = D.3894;
    parm.32.dim[1].stride = NON_LVALUE_EXPR <D.3898>;
    parm.32.data = 0B;
    parm.32.offset = -1;
    D.3899 = &parm.32;
    D.3900 = (integer(kind=4)) MAX_EXPR <(D.3899->dim[0].ubound - D.3899->dim[0].lbound) + 1, 0>;
    i = 1;
    while (1)
      {
        {
          logical(kind=4) D.3903;

          D.3903 = i > D.3900;
          if (D.3903) goto L.14;
          {
            integer(kind=8) D.3904;
            integer(kind=8) D.3905;
            struct array02_real(kind=8) parm.33;
            integer(kind=8) D.3907;
            integer(kind=8) D.3908;
            integer(kind=8) D.3909;
            struct array02_real(kind=8) * D.3910;
            integer(kind=4) D.3911;

            D.3904 = ubound.20;
            D.3905 = ubound.22;
            parm.33.dtype = {.elem_len=8, .rank=2, .type=3};
            D.3907 = offset.24;
            D.3908 = stride.21;
            parm.33.dim[0].lbound = 1;
            parm.33.dim[0].ubound = D.3904;
            parm.33.dim[0].stride = NON_LVALUE_EXPR <D.3908>;
            D.3909 = stride.23;
            parm.33.dim[1].lbound = 1;
            parm.33.dim[1].ubound = D.3905;
            parm.33.dim[1].stride = NON_LVALUE_EXPR <D.3909>;
            parm.33.data = 0B;
            parm.33.offset = -1;
            D.3910 = &parm.33;
            D.3911 = (integer(kind=4)) MAX_EXPR <(D.3910->dim[1].ubound - D.3910->dim[1].lbound) + 1, 0>;
            j = 1;
            while (1)
              {
                {
                  logical(kind=4) D.3914;

                  D.3914 = j > D.3911;
                  if (D.3914) goto L.16;
                  (*a.0)[((integer(kind=8)) j * stride.23 + offset.24) + (integer(kind=8)) i * stride.21] = (*a.0)[((integer(kind=8)) j * stride.23 + offset.24) + (integer(kind=8)) i * stride.21] + (*b.0)[((integer(kind=8)) j * stride.29 + offset.30) + (integer(kind=8)) i * stride.27];
                  L.15:;
                  j = j + 1;
                }
              }
            L.16:;
          }
          L.13:;
          i = i + 1;
        }
      }
    L.14:;
  }
}


my_matrix_add (struct array02_real(kind=8) & restrict a, struct array02_real(kind=8) & restrict b)
{
  integer(kind=8) ubound.34;
  integer(kind=8) stride.35;
  integer(kind=8) ubound.36;
  integer(kind=8) stride.37;
  integer(kind=8) offset.38;
  integer(kind=8) size.39;
  real(kind=8)[0:D.3968] * restrict a.0;
  integer(kind=8) ubound.40;
  integer(kind=8) stride.41;
  integer(kind=8) ubound.42;
  integer(kind=8) stride.43;
  integer(kind=8) offset.44;
  integer(kind=8) size.45;
  real(kind=8)[0:D.3964] * restrict b.0;
  integer(kind=4) i;
  integer(kind=4) j;
  integer(kind=8) D.3964;
  bitsizetype D.3965;
  sizetype D.3966;
  integer(kind=8) D.3968;
  bitsizetype D.3969;
  sizetype D.3970;

  {
    integer(kind=8) D.3967;

    D.3967 = a->dim[0].stride;
    stride.35 = D.3967 != 0 ? D.3967 : 1;
    a.0 = (real(kind=8)[0:D.3968] * restrict) a->data;
    ubound.34 = (a->dim[0].ubound - a->dim[0].lbound) + 1;
    stride.37 = a->dim[1].stride;
    ubound.36 = (a->dim[1].ubound - a->dim[1].lbound) + 1;
    size.39 = stride.37 * NON_LVALUE_EXPR <ubound.36>;
    offset.38 = -NON_LVALUE_EXPR <stride.35> - NON_LVALUE_EXPR <stride.37>;
    D.3968 = size.39 + -1;
    D.3969 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.39> * 64;
    D.3970 = (sizetype) NON_LVALUE_EXPR <size.39> * 8;
  }
  {
    integer(kind=8) D.3963;

    D.3963 = b->dim[0].stride;
    stride.41 = D.3963 != 0 ? D.3963 : 1;
    b.0 = (real(kind=8)[0:D.3964] * restrict) b->data;
    ubound.40 = (b->dim[0].ubound - b->dim[0].lbound) + 1;
    stride.43 = b->dim[1].stride;
    ubound.42 = (b->dim[1].ubound - b->dim[1].lbound) + 1;
    size.45 = stride.43 * NON_LVALUE_EXPR <ubound.42>;
    offset.44 = -NON_LVALUE_EXPR <stride.41> - NON_LVALUE_EXPR <stride.43>;
    D.3964 = size.45 + -1;
    D.3965 = (bitsizetype) (sizetype) NON_LVALUE_EXPR <size.45> * 64;
    D.3966 = (sizetype) NON_LVALUE_EXPR <size.45> * 8;
  }
  {
    integer(kind=8) D.3941;
    integer(kind=8) D.3942;
    struct array02_real(kind=8) parm.46;
    integer(kind=8) D.3944;
    integer(kind=8) D.3945;
    integer(kind=8) D.3946;
    struct array02_real(kind=8) * D.3947;
    integer(kind=4) D.3948;

    D.3941 = ubound.34;
    D.3942 = ubound.36;
    parm.46.dtype = {.elem_len=8, .rank=2, .type=3};
    D.3944 = offset.38;
    D.3945 = stride.35;
    parm.46.dim[0].lbound = 1;
    parm.46.dim[0].ubound = D.3941;
    parm.46.dim[0].stride = NON_LVALUE_EXPR <D.3945>;
    D.3946 = stride.37;
    parm.46.dim[1].lbound = 1;
    parm.46.dim[1].ubound = D.3942;
    parm.46.dim[1].stride = NON_LVALUE_EXPR <D.3946>;
    parm.46.data = 0B;
    parm.46.offset = -1;
    D.3947 = &parm.46;
    D.3948 = (integer(kind=4)) MAX_EXPR <(D.3947->dim[0].ubound - D.3947->dim[0].lbound) + 1, 0>;
    i = 1;
    while (1)
      {
        {
          logical(kind=4) D.3951;

          D.3951 = i > D.3948;
          if (D.3951) goto L.18;
          {
            integer(kind=8) D.3952;
            integer(kind=8) D.3953;
            struct array02_real(kind=8) parm.47;
            integer(kind=8) D.3955;
            integer(kind=8) D.3956;
            integer(kind=8) D.3957;
            struct array02_real(kind=8) * D.3958;
            integer(kind=4) D.3959;

            D.3952 = ubound.34;
            D.3953 = ubound.36;
            parm.47.dtype = {.elem_len=8, .rank=2, .type=3};
            D.3955 = offset.38;
            D.3956 = stride.35;
            parm.47.dim[0].lbound = 1;
            parm.47.dim[0].ubound = D.3952;
            parm.47.dim[0].stride = NON_LVALUE_EXPR <D.3956>;
            D.3957 = stride.37;
            parm.47.dim[1].lbound = 1;
            parm.47.dim[1].ubound = D.3953;
            parm.47.dim[1].stride = NON_LVALUE_EXPR <D.3957>;
            parm.47.data = 0B;
            parm.47.offset = -1;
            D.3958 = &parm.47;
            D.3959 = (integer(kind=4)) MAX_EXPR <(D.3958->dim[1].ubound - D.3958->dim[1].lbound) + 1, 0>;
            j = 1;
            while (1)
              {
                {
                  logical(kind=4) D.3962;

                  D.3962 = j > D.3959;
                  if (D.3962) goto L.20;
                  (*a.0)[((integer(kind=8)) j * stride.37 + offset.38) + (integer(kind=8)) i * stride.35] = (*a.0)[((integer(kind=8)) j * stride.37 + offset.38) + (integer(kind=8)) i * stride.35] + (*b.0)[((integer(kind=8)) j * stride.43 + offset.44) + (integer(kind=8)) i * stride.41];
                  L.19:;
                  j = j + 1;
                }
              }
            L.20:;
          }
          L.17:;
          i = i + 1;
        }
      }
    L.18:;
  }
}


