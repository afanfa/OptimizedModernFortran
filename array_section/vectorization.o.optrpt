Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -c -qopenmp -xhost -qopt-report=5 -qopt-report-file=vectorization.o.optrpt -o vectorization.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: VECTOR_1

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (VECTOR_1) [1/1=100.0%] vectorization.f90(1,9)
  -> EXTERN: (1,9) for_set_reentrancy
  -> EXTERN: (11,3) for_alloc_allocatable
  -> EXTERN: (11,3) for_alloc_allocatable
  -> EXTERN: (30,11) MY_MATRIX_ADD


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at vectorization.f90(15,9)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 3 2 1 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ vectorization.f90(15,9) ]

   LOOP BEGIN at vectorization.f90(14,6)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at vectorization.f90(17,31)
         remark #15389: vectorization support: reference A(i,j,k) has unaligned access   [ vectorization.f90(16,12) ]
         remark #15389: vectorization support: reference B(i,j,k) has unaligned access   [ vectorization.f90(17,12) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.312
         remark #15301: PERMUTED LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 20 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 9.280 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=62
      LOOP END

      LOOP BEGIN at vectorization.f90(17,31)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference A(i,j,k) has unaligned access   [ vectorization.f90(16,12) ]
         remark #15389: vectorization support: reference B(i,j,k) has unaligned access   [ vectorization.f90(17,12) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.600
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #25015: Estimate of max trip count of loop=2
      LOOP END
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at vectorization.f90(31,3)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

vectorization.f90(1,9):remark #34051: REGISTER ALLOCATION : [MAIN__] vectorization.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     140
            Global    :      42
            Local     :      98
        Regenerable   :      36
        Spilled       :       5
        
    Routine stack
        Variables     :     196 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :      24 [2.20e+04 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
