Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -c -qopenmp -xhost -qopt-report=5 -qopt-report-file=worker.o.optrpt -o worker.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: worker_module._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (worker_module._) [1/6=16.7%] worker.f90(1,8)


    Report from: Code generation optimizations [cg]

worker.f90(1,8):remark #34051: REGISTER ALLOCATION : [worker_module._] worker.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WORKER_MODULE::MY_MATRIX_ADD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WORKER_MODULE::MY_MATRIX_ADD) [2/6=33.3%] worker.f90(5,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at worker.f90(12,8)
<Multiversioned v1>
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ worker.f90(12,8) ]

   LOOP BEGIN at worker.f90(11,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at worker.f90(11,5)
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(13,11) ]
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(13,20) ]
      remark #15389: vectorization support: reference b(i,j) has unaligned access   [ worker.f90(13,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.295
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 2.750 
      remark #15478: estimated potential speedup: 2.050 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at worker.f90(11,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(13,11) ]
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(13,20) ]
      remark #15389: vectorization support: reference b(i,j) has unaligned access   [ worker.f90(13,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.182
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at worker.f90(11,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at worker.f90(12,8)
<Multiversioned v2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at worker.f90(11,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <a(i,j)>, stride is unknown to compiler   [ worker.f90(13,11) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <a(i,j)>, stride is unknown to compiler   [ worker.f90(13,20) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <b(i,j)>, stride is unknown to compiler   [ worker.f90(13,29) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.083
      remark #15452: unmasked strided loads: 2 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 6.000 
      remark #15478: estimated potential speedup: 0.990 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at worker.f90(11,5)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

worker.f90(5,14):remark #34051: REGISTER ALLOCATION : [worker_module_mp_my_matrix_add_] worker.f90:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :     111
            Global    :      51
            Local     :      60
        Regenerable   :       2
        Spilled       :      16
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     104 bytes*
            Reads     :      15 [3.19e+01 ~ 3.1%]
            Writes    :      15 [9.58e+00 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WORKER_MODULE::MY_MATRIX_ADD_INTENT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WORKER_MODULE::MY_MATRIX_ADD_INTENT) [3/6=50.0%] worker.f90(19,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at worker.f90(27,8)
<Multiversioned v1>
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ worker.f90(27,8) ]

   LOOP BEGIN at worker.f90(26,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at worker.f90(26,5)
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(28,11) ]
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(28,20) ]
      remark #15389: vectorization support: reference b(i,j) has unaligned access   [ worker.f90(28,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.295
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 2.750 
      remark #15478: estimated potential speedup: 2.050 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at worker.f90(26,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(28,11) ]
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(28,20) ]
      remark #15389: vectorization support: reference b(i,j) has unaligned access   [ worker.f90(28,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.182
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at worker.f90(26,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at worker.f90(27,8)
<Multiversioned v2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at worker.f90(26,5)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <a(i,j)>, stride is unknown to compiler   [ worker.f90(28,11) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <a(i,j)>, stride is unknown to compiler   [ worker.f90(28,20) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <b(i,j)>, stride is unknown to compiler   [ worker.f90(28,29) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.083
      remark #15452: unmasked strided loads: 2 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 6.000 
      remark #15478: estimated potential speedup: 0.990 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at worker.f90(26,5)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

worker.f90(19,14):remark #34051: REGISTER ALLOCATION : [worker_module_mp_my_matrix_add_intent_] worker.f90:19

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :     111
            Global    :      51
            Local     :      60
        Regenerable   :       2
        Spilled       :      16
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     104 bytes*
            Reads     :      15 [3.19e+01 ~ 3.1%]
            Writes    :      15 [9.58e+00 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WORKER_MODULE::MY_MATRIX_ADD_EXPLICIT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WORKER_MODULE::MY_MATRIX_ADD_EXPLICIT) [4/6=66.7%] worker.f90(34,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at worker.f90(41,8)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at worker.f90(41,8)
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #25420: Collapsed with loop at line 40 
   remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(42,11) ]
   remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(42,20) ]
   remark #15389: vectorization support: reference b(i,j) has unaligned access   [ worker.f90(42,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ worker.f90(41,8) ]
   remark #15305: vectorization support: vector length 4   [ worker.f90(41,8) ]
   remark #15399: vectorization support: unroll factor set to 4   [ worker.f90(41,8) ]
   remark #15309: vectorization support: normalized vectorization overhead 0.295   [ worker.f90(41,8) ]
   remark #15301: PERMUTED LOOP WAS VECTORIZED   [ worker.f90(41,8) ]
   remark #15442: entire loop may be executed in remainder   [ worker.f90(41,8) ]
   remark #15448: unmasked aligned unit stride loads: 1    [ worker.f90(41,8) ]
   remark #15449: unmasked aligned unit stride stores: 1    [ worker.f90(41,8) ]
   remark #15450: unmasked unaligned unit stride loads: 1    [ worker.f90(41,8) ]
   remark #15475: --- begin vector cost summary ---   [ worker.f90(41,8) ]
   remark #15476: scalar cost: 6    [ worker.f90(41,8) ]
   remark #15477: vector cost: 2.750    [ worker.f90(41,8) ]
   remark #15478: estimated potential speedup: 2.050    [ worker.f90(41,8) ]
   remark #15488: --- end vector cost summary ---   [ worker.f90(41,8) ]

   LOOP BEGIN at worker.f90(40,5)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at worker.f90(41,8)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(42,11) ]
   remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(42,20) ]
   remark #15389: vectorization support: reference b(i,j) has unaligned access   [ worker.f90(42,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.182
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at worker.f90(41,8)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

worker.f90(34,14):remark #34051: REGISTER ALLOCATION : [worker_module_mp_my_matrix_add_explicit_] worker.f90:34

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rsi rdi r8-r10 zmm0-zmm11]
        
    Routine temporaries
        Total         :      55
            Global    :      20
            Local     :      35
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WORKER_MODULE::MY_MATRIX_ADD_EXPLICIT_INTENT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WORKER_MODULE::MY_MATRIX_ADD_EXPLICIT_INTENT) [5/6=83.3%] worker.f90(48,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at worker.f90(56,8)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at worker.f90(56,8)
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #25420: Collapsed with loop at line 55 
   remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(57,11) ]
   remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(57,20) ]
   remark #15389: vectorization support: reference b(i,j) has unaligned access   [ worker.f90(57,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body   [ worker.f90(56,8) ]
   remark #15305: vectorization support: vector length 4   [ worker.f90(56,8) ]
   remark #15399: vectorization support: unroll factor set to 4   [ worker.f90(56,8) ]
   remark #15309: vectorization support: normalized vectorization overhead 0.295   [ worker.f90(56,8) ]
   remark #15301: PERMUTED LOOP WAS VECTORIZED   [ worker.f90(56,8) ]
   remark #15442: entire loop may be executed in remainder   [ worker.f90(56,8) ]
   remark #15448: unmasked aligned unit stride loads: 1    [ worker.f90(56,8) ]
   remark #15449: unmasked aligned unit stride stores: 1    [ worker.f90(56,8) ]
   remark #15450: unmasked unaligned unit stride loads: 1    [ worker.f90(56,8) ]
   remark #15475: --- begin vector cost summary ---   [ worker.f90(56,8) ]
   remark #15476: scalar cost: 6    [ worker.f90(56,8) ]
   remark #15477: vector cost: 2.750    [ worker.f90(56,8) ]
   remark #15478: estimated potential speedup: 2.050    [ worker.f90(56,8) ]
   remark #15488: --- end vector cost summary ---   [ worker.f90(56,8) ]

   LOOP BEGIN at worker.f90(55,5)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at worker.f90(56,8)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(57,11) ]
   remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(57,20) ]
   remark #15389: vectorization support: reference b(i,j) has unaligned access   [ worker.f90(57,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.182
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at worker.f90(56,8)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

worker.f90(48,14):remark #34051: REGISTER ALLOCATION : [worker_module_mp_my_matrix_add_explicit_intent_] worker.f90:48

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rsi rdi r8-r10 zmm0-zmm11]
        
    Routine temporaries
        Total         :      55
            Global    :      20
            Local     :      35
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WORKER_MODULE::MY_MATRIX_ADD_ALLOCATABLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WORKER_MODULE::MY_MATRIX_ADD_ALLOCATABLE) [6/6=100.0%] worker.f90(63,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at worker.f90(70,8)
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ worker.f90(70,8) ]

   LOOP BEGIN at worker.f90(69,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at worker.f90(69,5)
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(71,11) ]
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(71,20) ]
      remark #15389: vectorization support: reference b(i,j) has unaligned access   [ worker.f90(71,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.295
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 2.750 
      remark #15478: estimated potential speedup: 2.050 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at worker.f90(69,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(71,11) ]
      remark #15388: vectorization support: reference a(i,j) has aligned access   [ worker.f90(71,20) ]
      remark #15389: vectorization support: reference b(i,j) has unaligned access   [ worker.f90(71,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.182
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at worker.f90(69,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

worker.f90(63,14):remark #34051: REGISTER ALLOCATION : [worker_module_mp_my_matrix_add_allocatable_] worker.f90:63

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :      93
            Global    :      45
            Local     :      48
        Regenerable   :       1
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      10 [4.00e+01 ~ 2.4%]
            Writes    :       9 [8.81e+00 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
